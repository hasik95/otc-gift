from aiogram import types
from bot import dp
import sqlite3
from datetime import datetime

conn = sqlite3.connect("giftelf.db")

@dp.message_handler(commands=["mydeals"])
async def my_deals(message: types.Message):
    uid = message.from_user.id
    c = conn.cursor()
    c.execute("SELECT id, desc, status FROM deals WHERE seller=? OR buyer=?", (uid, uid))
    rows = c.fetchall()
    if not rows:
        return await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.")
    text = "\n".join([f"#{r[0]} ‚Äî {r[1]} [{r[2]}]" for r in rows])
    await message.answer("üóÇ –¢–≤–æ–∏ —Å–¥–µ–ª–∫–∏:\n" + text)

@dp.message_handler(commands=["cancel"])
async def cancel_deal(message: types.Message):
    args = message.get_args()
    if not args or not args.isdigit():
        return await message.reply("–ü—Ä–∏–º–µ—Ä: /cancel 2")
    deal_id = int(args)
    c = conn.cursor()
    c.execute("SELECT seller, status FROM deals WHERE id=?", (deal_id,))
    row = c.fetchone()
    if not row or row[0] != message.from_user.id:
        return await message.reply("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å–¥–µ–ª–∫—É.")
    if row[1] != "open":
        return await message.reply("–°–¥–µ–ª–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞, –µ—ë –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
    now = datetime.now().isoformat()
    c.execute("UPDATE deals SET status=?, updated_at=? WHERE id=?", ("cancelled", now, deal_id))
    conn.commit()
    await message.answer(f"–°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@dp.message_handler(commands=["finish"])
async def finish_deal(message: types.Message):
    args = message.get_args()
    if not args or not args.isdigit():
        return await message.reply("–ü—Ä–∏–º–µ—Ä: /finish 3")
    deal_id = int(args)
    c = conn.cursor()
    c.execute("SELECT seller, buyer, status FROM deals WHERE id=?", (deal_id,))
    row = c.fetchone()
    if not row or row[0] != message.from_user.id:
        return await message.reply("–¢—ã –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.")
    if row[2] != "ongoing":
        return await message.reply("–°–¥–µ–ª–∫–∞ –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    now = datetime.now().isoformat()
    c.execute("UPDATE deals SET status=?, updated_at=? WHERE id=?", ("awaiting_confirmation", now, deal_id))
    conn.commit()
    await message.answer(f"–¢—ã –∑–∞–≤–µ—Ä—à–∏–ª —Å–¥–µ–ª–∫—É #{deal_id}. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
    await dp.bot.send_message(row[1], f"üéÅ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Å–¥–µ–ª–∫—É #{deal_id}. –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –æ—Ç–ø—Ä–∞–≤—å /confirm {deal_id}")

@dp.message_handler(commands=["confirm"])
async def confirm_finish(message: types.Message):
    args = message.get_args()
    if not args or not args.isdigit():
        return await message.reply("–ü—Ä–∏–º–µ—Ä: /confirm 3")
    deal_id = int(args)
    c = conn.cursor()
    c.execute("SELECT buyer, status FROM deals WHERE id=?", (deal_id,))
    row = c.fetchone()
    if not row or row[0] != message.from_user.id:
        return await message.reply("–¢—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.")
    if row[1] != "awaiting_confirmation":
        return await message.reply("–°–¥–µ–ª–∫–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º.")
    now = datetime.now().isoformat()
    c.execute("UPDATE deals SET status=?, updated_at=? WHERE id=?", ("finished", now, deal_id))
    conn.commit()
    await message.answer(f"–°–¥–µ–ª–∫–∞ #{deal_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ")